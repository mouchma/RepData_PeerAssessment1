library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
install.packages("knitr")
library("knitr")
install.packages("knitr")
t$weekday <- c("Weekend", "Weekday", "Weekday",
"Weekday", "Weekday", "Weekday",
"Weekend")[as.POSIXlt(data3$date)$wday + 1]
t$weekday <- c("Weekend", "Weekday", "Weekday",
"Weekday", "Weekday", "Weekday",
"Weekend")[as.POSIXlt(t$date)$wday + 1]
t$weekday <- c("Weekend", "Weekday", "Weekday",
"Weekday", "Weekday", "Weekday",
"Weekend")[as.POSIXlt(t$date)$wday + 1]
print(1, n=50)
print(t, n=50)
t
setwd("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1")
## Loading and preprocessing the data
steps <- read.csv("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1/activity/activity.csv", header=TRUE, na.strings = "NA")
#summary(steps)
summary(steps)
steps$date<-as.Date(steps$date, format="%Y-%m-%d")
#head(steps)
##What is mean total number of steps taken per day?
Steps <- steps %>%
group_by(date) %>%
summarize(dailySteps = sum(steps, na.rm=TRUE))
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
install.packages("knitr")
library("knitr")
setwd("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1")
## Loading and preprocessing the data
steps <- read.csv("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1/activity/activity.csv", header=TRUE, na.strings = "NA")
#summary(steps)
summary(steps)
steps$date<-as.Date(steps$date, format="%Y-%m-%d")
#head(steps)
##What is mean total number of steps taken per day?
Steps <- steps %>%
group_by(date) %>%
summarize(dailySteps = sum(steps, na.rm=TRUE))
### Make a histogram of the total number of steps taken each day
ggplot(Steps, aes(x=dailySteps)) + geom_histogram(color="blue", fill="lightblue") +
labs(
title = "Histogram showing distribution of daily steps by number of days",
x = "Daily Step Count",
y = "Number of Days"
)
### Calculate and report the mean and median of the total number of steps taken per day
summarySteps<-summarize(.data=Steps, meanSteps=mean(dailySteps), medianSteps=median(dailySteps))
summarySteps
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#and the average number of steps taken, averaged across all days (y-axis)
stepIntervals <- steps %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps, na.rm=TRUE))
ggplot(data=stepIntervals, aes(x=interval, y=meanSteps)) +
geom_line(na.rm=TRUE, color="blue") +
labs(
title = "Time series showing average steps by 5 minute interval",
x = "Interval (minutes)",
y = "Mean steps"
)
### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
stepIntervals[which.max(stepIntervals$meanSteps),]
### imputing missing values
### use the mean value rounded to integer for the 5 minute interval with the missing value
stepIntervals$imputedSteps <- round(stepIntervals$meanSteps,0)
Steps_imputed <- left_join(x=steps,y=stepIntervals, by="interval" )
Steps_imputed$steps[is.na(Steps_imputed$steps)] <- Steps_imputed$imputedSteps
t<-Steps_imputed %>% select(1:4)
### Make a histogram of the total number of steps taken each day with imputed values for missing
Steps_i <- t %>%
group_by(date) %>%
summarize(dailySteps = sum(steps))
### Make a histogram of the total number of steps taken each day with imputed values for missing
ggplot(Steps_i, aes(x=dailySteps)) + geom_histogram(color="blue", fill="lightblue") +
labs(
title = "Histogram showing distribution of daily steps by number of days with imputed values for NAs",
x = "Daily Step Count",
y = "Number of Days"
)
### Calculate and report the mean and median of the total number of steps taken per day (with imputed values)
summarySteps_i<-summarize(.data=Steps_i, meanSteps=mean(dailySteps), medianSteps=median(dailySteps))
summarySteps_i
###Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
t$weekday <- c("Weekend", "Weekday", "Weekday",
"Weekday", "Weekday", "Weekday",
"Weekend")[as.POSIXlt(t$date)$wday + 1]
t
Steps_days <- t %>%
group_by(weekday) %>%
summarize(dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday)
ggplot(Steps_days, aes(x=interval, y=dailySteps, fill=type)) +
geom_line(stat = "identity", position="identity") +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1)
ggplot(Steps_days, aes(x=interval, y=dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1)
t
t
Steps_days
Steps_days <- t %>%
group_by(weekday, date) %>%
summarize(dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday)
Steps_days
Steps_days <- t %>%
group_by(weekday, date) %>%
summarize(avg_dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday)
Steps_days
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1)
Steps_days <- t %>%
group_by(weekday, interval) %>%
summarize(avg_dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday)
Steps_days
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1)
ggtitle("Average number of steps per interval on weekdays and weekend days")
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekdays and weekend days") +
ggcaption("Includes imputed values")
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekdays and weekend days") +
caption("Includes imputed values")
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekdays and weekend days") +
labs(caption("Includes imputed values"))
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Number of Steps") +
ylab("Interval") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekdays and weekend days") +
labs(caption="Includes imputed values")
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Interval") +
ylab("Number of steps") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekdays and weekend days") +
labs(caption="Includes imputed values")
Steps_days <- t %>%
group_by(weekday, interval) %>%
summarize(avg_dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday,
levels = sort(unique(Steps_days$weekday), decreasing = TRUE))
Steps_days
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Interval") +
ylab("Number of steps") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekdays and weekend days") +
labs(caption="Includes imputed values")
Steps_days <- t %>%
group_by(weekday, interval) %>%
summarize(avg_dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday,
levels = sort(unique(Steps_days$weekday), decreasing = TRUE))
Steps_days
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Interval") +
ylab("Number of steps") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekend days compared to weekdays") +
labs(caption="Includes imputed values")
setwd("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1")
## Loading and preprocessing the data
steps <- read.csv("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1/activity/activity.csv", header=TRUE, na.strings = "NA")
summary(steps)
steps$date<-as.Date(steps$date, format="%Y-%m-%d")
#head(steps)
##What is mean total number of steps taken per day?
Steps <- steps %>%
group_by(date) %>%
summarize(dailySteps = sum(steps, na.rm=TRUE))
### Make a histogram of the total number of steps taken each day
ggplot(Steps, aes(x=dailySteps)) + geom_histogram(color="blue", fill="lightblue") +
labs(
title = "Histogram showing distribution of daily steps by number of days",
x = "Daily Step Count",
y = "Number of Days"
)
### Calculate and report the mean and median of the total number of steps taken per day
summarySteps<-summarize(.data=Steps, meanSteps=mean(dailySteps), medianSteps=median(dailySteps))
summarySteps
#Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis)
#and the average number of steps taken, averaged across all days (y-axis)
stepIntervals <- steps %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps, na.rm=TRUE))
ggplot(data=stepIntervals, aes(x=interval, y=meanSteps)) +
geom_line(na.rm=TRUE, color="blue") +
labs(
title = "Time series showing average steps by 5 minute interval",
x = "Interval (minutes)",
y = "Mean steps"
)
### Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps?
stepIntervals[which.max(stepIntervals$meanSteps),]
### imputing missing values
### use the mean value rounded to integer for the 5 minute interval with the missing value
stepIntervals$imputedSteps <- round(stepIntervals$meanSteps,0)
Steps_imputed <- left_join(x=steps,y=stepIntervals, by="interval" )
Steps_imputed$steps[is.na(Steps_imputed$steps)] <- Steps_imputed$imputedSteps
t<-Steps_imputed %>% select(1:4)
### Make a histogram of the total number of steps taken each day with imputed values for missing
Steps_i <- t %>%
group_by(date) %>%
summarize(dailySteps = sum(steps))
### Make a histogram of the total number of steps taken each day with imputed values for missing
ggplot(Steps_i, aes(x=dailySteps)) + geom_histogram(color="blue", fill="lightblue") +
labs(
title = "Histogram showing distribution of daily steps by number of days with imputed values for NAs",
x = "Daily Step Count",
y = "Number of Days"
)
### Calculate and report the mean and median of the total number of steps taken per day (with imputed values)
summarySteps_i<-summarize(.data=Steps_i, meanSteps=mean(dailySteps), medianSteps=median(dailySteps))
summarySteps_i
###Create a new factor variable in the dataset with two levels – “weekday” and “weekend” indicating whether a given date is a weekday or weekend day.
t$weekday <- c("Weekend", "Weekday", "Weekday",
"Weekday", "Weekday", "Weekday",
"Weekend")[as.POSIXlt(t$date)$wday + 1]
###Make a panel plot containing a time series plot (i.e. type = "l")
###of the 5-minute interval (x-axis)
###and the average number of steps taken, averaged across
###all weekday days or weekend days (y-axis).
Steps_days <- t %>%
group_by(weekday, interval) %>%
summarize(avg_dailySteps = mean(steps))
Steps_days$weekday <- factor(Steps_days$weekday,
levels = sort(unique(Steps_days$weekday), decreasing = TRUE))
Steps_days
ggplot(Steps_days, aes(x=interval, y=avg_dailySteps)) +
geom_line() +
xlab("Interval") +
ylab("Number of steps") +
facet_wrap(~ weekday, ncol = 1) +
ggtitle("Average number of steps per interval on weekend days compared to weekdays") +
labs(caption="Includes imputed values")
stepIntervals <- steps %>%
group_by(interval) %>%
summarize(meanSteps = mean(steps, na.rm=TRUE))
ggplot(data=stepIntervals, aes(x=interval, y=meanSteps)) +
geom_line(na.rm=TRUE, color="blue") +
labs(
title = "Time series showing average steps by 5 minute interval",
x = "Interval (minutes)",
y = "Mean steps"
)
stepIntervals[which.max(stepIntervals$meanSteps),]
knit2html()
C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1
C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1
unlink("PA1_template_cache", recursive = TRUE)
C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1
```r{simulation}
setwd("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1")
```r{}
steps <- read.csv("C:/Users/maril/OneDrive/Documents/R Data Science/Course4/Week1/RepData_PeerAssessment1/activity/activity.csv", header=TRUE, na.strings = "NA")
summary(steps)
steps$date<-as.Date(steps$date, format="%Y-%m-%d")
library(knitr)
knit_with_parameters("~/R Data Science/Course4/Week1/RepData_PeerAssessment1/PA1_template.Rmd")
```r{}
```r{a}
```r{}
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
install.packages("knitr")
library("knitr")
install.packages("knitr")
source("~/R Data Science/Course5/Week2/steps.R", echo=TRUE)
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
install.packages("knitr")
library("knitr")
---
title: "Reproducible Research: Peer Assessment 1"
## Loading and preprocessing the data
```{r echo=TRUE}
## What is mean total number of steps taken per day?
```{r}
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("knitr")
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("knitr")
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("knitr")
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("knitr")
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("knitr")
library("lubridate")
library("scales")
library("gridExtra")
library("ggthemes")
library("dplyr")
library("tidyverse")
library("ggplot2")
library("knitr")
